<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan Continuous" enabled="true">
      <stringProp name="TestPlan.comments">Continuous test</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG 1 Mail Send Text" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadGroup1.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threadGroup1.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1493470740000</longProp>
        <longProp name="ThreadGroup.end_time">1493471700000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <stringProp name="TestPlan.comments">Sending clear text messages</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Start" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(threadGroup1.users)}&quot; == &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Stop After" enabled="true">
          <stringProp name="IfController.condition">${sample_count} &gt; 120</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">2</intProp>
            <intProp name="ActionProcessor.target">2</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="TX1" elementType="Argument">
              <stringProp name="Argument.name">TX1</stringProp>
              <stringProp name="Argument.value">Metin 1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX2" elementType="Argument">
              <stringProp name="Argument.name">TX2</stringProp>
              <stringProp name="Argument.value">Metin 2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX3" elementType="Argument">
              <stringProp name="Argument.name">TX3</stringProp>
              <stringProp name="Argument.value">Metin 3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX4" elementType="Argument">
              <stringProp name="Argument.name">TX4</stringProp>
              <stringProp name="Argument.value">Metin 4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX5" elementType="Argument">
              <stringProp name="Argument.name">TX5</stringProp>
              <stringProp name="Argument.value">Metin 5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX6" elementType="Argument">
              <stringProp name="Argument.name">TX6</stringProp>
              <stringProp name="Argument.value">Metin 6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX7" elementType="Argument">
              <stringProp name="Argument.name">TX7</stringProp>
              <stringProp name="Argument.value">Metin 7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX8" elementType="Argument">
              <stringProp name="Argument.name">TX8</stringProp>
              <stringProp name="Argument.value">Metin 8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX9" elementType="Argument">
              <stringProp name="Argument.name">TX9</stringProp>
              <stringProp name="Argument.value">Metin 9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX10" elementType="Argument">
              <stringProp name="Argument.name">TX10</stringProp>
              <stringProp name="Argument.value">Metin 10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX11" elementType="Argument">
              <stringProp name="Argument.name">TX11</stringProp>
              <stringProp name="Argument.value">Metin 11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX12" elementType="Argument">
              <stringProp name="Argument.name">TX12</stringProp>
              <stringProp name="Argument.value">Metin 12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX13" elementType="Argument">
              <stringProp name="Argument.name">TX13</stringProp>
              <stringProp name="Argument.value">Metin 13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX14" elementType="Argument">
              <stringProp name="Argument.name">TX14</stringProp>
              <stringProp name="Argument.value">Metin 14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX15" elementType="Argument">
              <stringProp name="Argument.name">TX15</stringProp>
              <stringProp name="Argument.value">Metin 15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX16" elementType="Argument">
              <stringProp name="Argument.name">TX16</stringProp>
              <stringProp name="Argument.value">Metin 16</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX17" elementType="Argument">
              <stringProp name="Argument.name">TX17</stringProp>
              <stringProp name="Argument.value">Metin 17</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX18" elementType="Argument">
              <stringProp name="Argument.name">TX18</stringProp>
              <stringProp name="Argument.value">Metin 18</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX19" elementType="Argument">
              <stringProp name="Argument.name">TX19</stringProp>
              <stringProp name="Argument.value">Metin 19</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX20" elementType="Argument">
              <stringProp name="Argument.name">TX20</stringProp>
              <stringProp name="Argument.value">Metin 20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX21" elementType="Argument">
              <stringProp name="Argument.name">TX21</stringProp>
              <stringProp name="Argument.value">Metin 21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX22" elementType="Argument">
              <stringProp name="Argument.name">TX22</stringProp>
              <stringProp name="Argument.value">Metin 22</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX23" elementType="Argument">
              <stringProp name="Argument.name">TX23</stringProp>
              <stringProp name="Argument.value">Metin 23</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX24" elementType="Argument">
              <stringProp name="Argument.name">TX24</stringProp>
              <stringProp name="Argument.value">Metin 24</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX25" elementType="Argument">
              <stringProp name="Argument.name">TX25</stringProp>
              <stringProp name="Argument.value">Metin 25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX26" elementType="Argument">
              <stringProp name="Argument.name">TX26</stringProp>
              <stringProp name="Argument.value">Metin 26</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX27" elementType="Argument">
              <stringProp name="Argument.name">TX27</stringProp>
              <stringProp name="Argument.value">Metin 27</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX28" elementType="Argument">
              <stringProp name="Argument.name">TX28</stringProp>
              <stringProp name="Argument.value">Metin 28</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX29" elementType="Argument">
              <stringProp name="Argument.name">TX29</stringProp>
              <stringProp name="Argument.value">Metin 29</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX30" elementType="Argument">
              <stringProp name="Argument.name">TX30</stringProp>
              <stringProp name="Argument.value">Metin 30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX31" elementType="Argument">
              <stringProp name="Argument.name">TX31</stringProp>
              <stringProp name="Argument.value">Metin 31</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX32" elementType="Argument">
              <stringProp name="Argument.name">TX32</stringProp>
              <stringProp name="Argument.value">Metin 32</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX33" elementType="Argument">
              <stringProp name="Argument.name">TX33</stringProp>
              <stringProp name="Argument.value">Metin 33</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX34" elementType="Argument">
              <stringProp name="Argument.name">TX34</stringProp>
              <stringProp name="Argument.value">Metin 34</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX35" elementType="Argument">
              <stringProp name="Argument.name">TX35</stringProp>
              <stringProp name="Argument.value">Metin 35</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX36" elementType="Argument">
              <stringProp name="Argument.name">TX36</stringProp>
              <stringProp name="Argument.value">Metin 36</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX37" elementType="Argument">
              <stringProp name="Argument.name">TX37</stringProp>
              <stringProp name="Argument.value">Metin 37</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX38" elementType="Argument">
              <stringProp name="Argument.name">TX38</stringProp>
              <stringProp name="Argument.value">Metin 38</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX39" elementType="Argument">
              <stringProp name="Argument.name">TX39</stringProp>
              <stringProp name="Argument.value">Metin 39</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX40" elementType="Argument">
              <stringProp name="Argument.name">TX40</stringProp>
              <stringProp name="Argument.value">Metin 40</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX41" elementType="Argument">
              <stringProp name="Argument.name">TX41</stringProp>
              <stringProp name="Argument.value">Metin 41</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX42" elementType="Argument">
              <stringProp name="Argument.name">TX42</stringProp>
              <stringProp name="Argument.value">Metin 42</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX43" elementType="Argument">
              <stringProp name="Argument.name">TX43</stringProp>
              <stringProp name="Argument.value">Metin 43</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX44" elementType="Argument">
              <stringProp name="Argument.name">TX44</stringProp>
              <stringProp name="Argument.value">Metin 44</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX45" elementType="Argument">
              <stringProp name="Argument.name">TX45</stringProp>
              <stringProp name="Argument.value">Metin 45</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX46" elementType="Argument">
              <stringProp name="Argument.name">TX46</stringProp>
              <stringProp name="Argument.value">Metin 46</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX47" elementType="Argument">
              <stringProp name="Argument.name">TX47</stringProp>
              <stringProp name="Argument.value">Metin 47</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX48" elementType="Argument">
              <stringProp name="Argument.name">TX48</stringProp>
              <stringProp name="Argument.value">Metin 48</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX49" elementType="Argument">
              <stringProp name="Argument.name">TX49</stringProp>
              <stringProp name="Argument.value">Metin 49</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX50" elementType="Argument">
              <stringProp name="Argument.name">TX50</stringProp>
              <stringProp name="Argument.value">Metin 50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX51" elementType="Argument">
              <stringProp name="Argument.name">TX51</stringProp>
              <stringProp name="Argument.value">Metin 51</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX52" elementType="Argument">
              <stringProp name="Argument.name">TX52</stringProp>
              <stringProp name="Argument.value">Metin 52</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX53" elementType="Argument">
              <stringProp name="Argument.name">TX53</stringProp>
              <stringProp name="Argument.value">Metin 53</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX54" elementType="Argument">
              <stringProp name="Argument.name">TX54</stringProp>
              <stringProp name="Argument.value">Metin 54</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX55" elementType="Argument">
              <stringProp name="Argument.name">TX55</stringProp>
              <stringProp name="Argument.value">Metin 55</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX56" elementType="Argument">
              <stringProp name="Argument.name">TX56</stringProp>
              <stringProp name="Argument.value">Metin 56</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX57" elementType="Argument">
              <stringProp name="Argument.name">TX57</stringProp>
              <stringProp name="Argument.value">Metin 57</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX58" elementType="Argument">
              <stringProp name="Argument.name">TX58</stringProp>
              <stringProp name="Argument.value">Metin 58</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX59" elementType="Argument">
              <stringProp name="Argument.name">TX59</stringProp>
              <stringProp name="Argument.value">Metin 59</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX60" elementType="Argument">
              <stringProp name="Argument.name">TX60</stringProp>
              <stringProp name="Argument.value">Metin 60</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX61" elementType="Argument">
              <stringProp name="Argument.name">TX61</stringProp>
              <stringProp name="Argument.value">Metin 61</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX62" elementType="Argument">
              <stringProp name="Argument.name">TX62</stringProp>
              <stringProp name="Argument.value">Metin 62</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX63" elementType="Argument">
              <stringProp name="Argument.name">TX63</stringProp>
              <stringProp name="Argument.value">Metin 63</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX64" elementType="Argument">
              <stringProp name="Argument.name">TX64</stringProp>
              <stringProp name="Argument.value">Metin 64</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX65" elementType="Argument">
              <stringProp name="Argument.name">TX65</stringProp>
              <stringProp name="Argument.value">Metin 65</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX66" elementType="Argument">
              <stringProp name="Argument.name">TX66</stringProp>
              <stringProp name="Argument.value">Metin 66</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX67" elementType="Argument">
              <stringProp name="Argument.name">TX67</stringProp>
              <stringProp name="Argument.value">Metin 67</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX68" elementType="Argument">
              <stringProp name="Argument.name">TX68</stringProp>
              <stringProp name="Argument.value">Metin 68</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX69" elementType="Argument">
              <stringProp name="Argument.name">TX69</stringProp>
              <stringProp name="Argument.value">Metin 69</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX70" elementType="Argument">
              <stringProp name="Argument.name">TX70</stringProp>
              <stringProp name="Argument.value">Metin 70</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX71" elementType="Argument">
              <stringProp name="Argument.name">TX71</stringProp>
              <stringProp name="Argument.value">Metin 71</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX72" elementType="Argument">
              <stringProp name="Argument.name">TX72</stringProp>
              <stringProp name="Argument.value">Metin 72</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX73" elementType="Argument">
              <stringProp name="Argument.name">TX73</stringProp>
              <stringProp name="Argument.value">Metin 73</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX74" elementType="Argument">
              <stringProp name="Argument.name">TX74</stringProp>
              <stringProp name="Argument.value">Metin 74</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX75" elementType="Argument">
              <stringProp name="Argument.name">TX75</stringProp>
              <stringProp name="Argument.value">Metin 75</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX76" elementType="Argument">
              <stringProp name="Argument.name">TX76</stringProp>
              <stringProp name="Argument.value">Metin 76</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX77" elementType="Argument">
              <stringProp name="Argument.name">TX77</stringProp>
              <stringProp name="Argument.value">Metin 77</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX78" elementType="Argument">
              <stringProp name="Argument.name">TX78</stringProp>
              <stringProp name="Argument.value">Metin 78</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX79" elementType="Argument">
              <stringProp name="Argument.name">TX79</stringProp>
              <stringProp name="Argument.value">Metin 79</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX80" elementType="Argument">
              <stringProp name="Argument.name">TX80</stringProp>
              <stringProp name="Argument.value">Metin 80</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX81" elementType="Argument">
              <stringProp name="Argument.name">TX81</stringProp>
              <stringProp name="Argument.value">Metin 81</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX82" elementType="Argument">
              <stringProp name="Argument.name">TX82</stringProp>
              <stringProp name="Argument.value">Metin 82</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX83" elementType="Argument">
              <stringProp name="Argument.name">TX83</stringProp>
              <stringProp name="Argument.value">Metin 83</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX84" elementType="Argument">
              <stringProp name="Argument.name">TX84</stringProp>
              <stringProp name="Argument.value">Metin 84</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX85" elementType="Argument">
              <stringProp name="Argument.name">TX85</stringProp>
              <stringProp name="Argument.value">Metin 85</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX86" elementType="Argument">
              <stringProp name="Argument.name">TX86</stringProp>
              <stringProp name="Argument.value">Metin 86</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX87" elementType="Argument">
              <stringProp name="Argument.name">TX87</stringProp>
              <stringProp name="Argument.value">Metin 87</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX88" elementType="Argument">
              <stringProp name="Argument.name">TX88</stringProp>
              <stringProp name="Argument.value">Metin 88</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX89" elementType="Argument">
              <stringProp name="Argument.name">TX89</stringProp>
              <stringProp name="Argument.value">Metin 89</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX90" elementType="Argument">
              <stringProp name="Argument.name">TX90</stringProp>
              <stringProp name="Argument.value">Metin 90</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX91" elementType="Argument">
              <stringProp name="Argument.name">TX91</stringProp>
              <stringProp name="Argument.value">Metin 91</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX92" elementType="Argument">
              <stringProp name="Argument.name">TX92</stringProp>
              <stringProp name="Argument.value">Metin 92</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX93" elementType="Argument">
              <stringProp name="Argument.name">TX93</stringProp>
              <stringProp name="Argument.value">Metin 93</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX94" elementType="Argument">
              <stringProp name="Argument.name">TX94</stringProp>
              <stringProp name="Argument.value">Metin 94</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX95" elementType="Argument">
              <stringProp name="Argument.name">TX95</stringProp>
              <stringProp name="Argument.value">Metin 95</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX96" elementType="Argument">
              <stringProp name="Argument.name">TX96</stringProp>
              <stringProp name="Argument.value">Metin 96</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX97" elementType="Argument">
              <stringProp name="Argument.name">TX97</stringProp>
              <stringProp name="Argument.value">Metin 97</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX98" elementType="Argument">
              <stringProp name="Argument.name">TX98</stringProp>
              <stringProp name="Argument.value">Metin 98</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX99" elementType="Argument">
              <stringProp name="Argument.name">TX99</stringProp>
              <stringProp name="Argument.value">Metin 99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX100" elementType="Argument">
              <stringProp name="Argument.name">TX100</stringProp>
              <stringProp name="Argument.value">Metin 100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX101" elementType="Argument">
              <stringProp name="Argument.name">TX101</stringProp>
              <stringProp name="Argument.value">Metin 101</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX102" elementType="Argument">
              <stringProp name="Argument.name">TX102</stringProp>
              <stringProp name="Argument.value">Metin 102</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX103" elementType="Argument">
              <stringProp name="Argument.name">TX103</stringProp>
              <stringProp name="Argument.value">Metin 103</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX104" elementType="Argument">
              <stringProp name="Argument.name">TX104</stringProp>
              <stringProp name="Argument.value">Metin 104</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX105" elementType="Argument">
              <stringProp name="Argument.name">TX105</stringProp>
              <stringProp name="Argument.value">Metin 105</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX106" elementType="Argument">
              <stringProp name="Argument.name">TX106</stringProp>
              <stringProp name="Argument.value">Metin 106</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX107" elementType="Argument">
              <stringProp name="Argument.name">TX107</stringProp>
              <stringProp name="Argument.value">Metin 107</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX108" elementType="Argument">
              <stringProp name="Argument.name">TX108</stringProp>
              <stringProp name="Argument.value">Metin 108</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX109" elementType="Argument">
              <stringProp name="Argument.name">TX109</stringProp>
              <stringProp name="Argument.value">Metin 109</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX110" elementType="Argument">
              <stringProp name="Argument.name">TX110</stringProp>
              <stringProp name="Argument.value">Metin 110</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX111" elementType="Argument">
              <stringProp name="Argument.name">TX111</stringProp>
              <stringProp name="Argument.value">Metin 111</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX112" elementType="Argument">
              <stringProp name="Argument.name">TX112</stringProp>
              <stringProp name="Argument.value">Metin 112</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX113" elementType="Argument">
              <stringProp name="Argument.name">TX113</stringProp>
              <stringProp name="Argument.value">Metin 113</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX114" elementType="Argument">
              <stringProp name="Argument.name">TX114</stringProp>
              <stringProp name="Argument.value">Metin 114</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX115" elementType="Argument">
              <stringProp name="Argument.name">TX115</stringProp>
              <stringProp name="Argument.value">Metin 115</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX116" elementType="Argument">
              <stringProp name="Argument.name">TX116</stringProp>
              <stringProp name="Argument.value">Metin 116</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX117" elementType="Argument">
              <stringProp name="Argument.name">TX117</stringProp>
              <stringProp name="Argument.value">Metin 117</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX118" elementType="Argument">
              <stringProp name="Argument.name">TX118</stringProp>
              <stringProp name="Argument.value">Metin 118</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX119" elementType="Argument">
              <stringProp name="Argument.name">TX119</stringProp>
              <stringProp name="Argument.value">Metin 119</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TX120" elementType="Argument">
              <stringProp name="Argument.name">TX120</stringProp>
              <stringProp name="Argument.value">Metin 120</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Sample Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">sample_count</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Random Msg" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
	import java.text.DateFormat;
	import java.text.SimpleDateFormat;

	msg1 = &quot;OSSEC HIDS Notification. \n&quot; 
				      + &quot;2016 Mar 09 18:35:14\n&quot; 
				      + &quot;Received From: localhost-&gt;/var/log/messages\n&quot;
							+ &quot;Rule: 1002 fired (level 2) -&gt; \&quot;Unknown problem somewhere in the system.\&quot;\n&quot;;
	msg2 = &quot;İşlerin Günlük Durum Raporu&quot;;

	msg3 = &quot;Merhaba,\n&quot;
		   + &quot;İş analiz formlarını bugün tamamlayıp iletebilir misiniz rica etsem?\n&quot;;

	msg4 = &quot;Bunun güvenlik testleri için iş talep yeterli olur mu yoksa EBYS üzerinden resmi yazı mı yazmak gerekir?\n&quot;
	       + &quot;Ayrıca diğer konuyla(daha önceki mailimde ilettiğim gereksinimleri içeren sunucu isteği) &quot; 
	       + &quot;ilgili olarak da resmi yazı iletecekler sanırım. &quot;;

	msg5   = &quot;if this sounds interesting to you, let us know and we will arrange a complimentary session with a&quot; 
		 + &quot;Liquidware Labs engineer to assess if this solution can bring value to your environment.&quot;  
		 + &quot; Contact us at info@distilogix.com&quot;;

	msg6 = &quot;73354 numaralı iş talebinde de belirtilen ve web sayfasında ivedi olarak güncellenmesi &quot; 
	       + &quot;gerekli olan söz konusu dosyalar ektedir.&quot;;



	String[] query = new String[]{msg1, msg2, msg3, msg4, msg5, msg6 };

	Random random = new Random();

	int i = random.nextInt(query.length);

	DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);
	Date myDate = new Date();
	currentDate = dateFormat.format(myDate);

	log.info(&quot;Random text @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  query[i]);
	print(&quot;Random text @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  query[i]);

	//print(&quot;*******Random text: &quot; + query[i]);
	//log.info(&quot;*******Random text: &quot; + query[i]);
	vars.put(&quot;MSG&quot;, query[i]);


	</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Msg" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

String sIndx = vars.get(&quot;sample_count&quot;);
int indx = Integer.parseInt(sIndx);
String message = vars.get(&quot;TX&quot; + indx.toString());
     
DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);
Date myDate = new Date();
currentDate = dateFormat.format(myDate);

log.info(&quot;Text &quot; + indx + &quot; @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  message);
print(&quot;Text &quot; + indx + &quot; @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  message);

vars.put(&quot;MSG&quot;, message );</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Save to CSV" enabled="true">
          <stringProp name="TestPlan.comments">save random message inputs to a csv file</stringProp>
          <stringProp name="BeanShellSampler.query">    //String fileName = vars.get(&quot;CSVFILENAME&quot;) + &quot;.csv&quot;;
	String FILENAME = &quot;/home/koray/codes/TEZ/msgs.csv&quot;;
     String FILENAME2 = &quot;/home/koray/codes/TEZ/sample_count1.csv&quot;;
	FileWriter fstream = new FileWriter(FILENAME, true);
	BufferedWriter out = new BufferedWriter(fstream);

	FileWriter fstream2 = new FileWriter(FILENAME2, true);
	BufferedWriter out2 = new BufferedWriter(fstream2);

	String msg = vars.get(&quot;MSG&quot;);
	msg = msg.replaceAll(&quot;[\n\r]&quot;, &quot; &quot;);
    
	out.write(msg);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();


     String msg2 = vars.get(&quot;sample_count&quot;);
    	out2.write(System.getProperty(&quot;line.separator&quot;));
	out2.write(msg2);
	out2.close();
	fstream2.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="true">
          <stringProp name="SMTPSampler.server">${__P(smtp.server)}</stringProp>
          <stringProp name="SMTPSampler.serverPort">${__P(smtp.port)}</stringProp>
          <stringProp name="SMTPSampler.mailFrom">test${sample_count}@test.local</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">test1@test.local</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">${__P(smtp.server)}_Send_Text</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">true</stringProp>
          <stringProp name="SMTPSampler.message">Message from JMeter Test 1thread # ${__threadNum}
${MSG}</stringProp>
          <stringProp name="SMTPSampler.plainBody">false</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">false</stringProp>
          <stringProp name="SMTPSampler.password"></stringProp>
          <stringProp name="SMTPSampler.username"></stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">true</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>true</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename">/home/koray/codes/TEZ/response.jtl</stringProp>
            <boolProp name="RespTimeGraph.seriesselection">true</boolProp>
            <stringProp name="RespTimeGraph.seriesselectionmatchlabel">SMTP</stringProp>
            <stringProp name="RespTimeGraph.interval">500</stringProp>
            <intProp name="RespTimeGraph.linestrockwidth">2</intProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>true</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename">/home/koray/codes/TEZ/results.jtl</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor SMTP2" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleResult;
	import java.util.regex.Pattern;
	import java.util.regex.Matcher;

	sub = ctx.getPreviousResult(); 
	//subs = prev.getSubResults();
	cnt = ${__counter(TRUE,)};
	vars.put(&quot;mycnt&quot;, cnt.toString());

	//system.currentmilis 13 uzunlukta
	String REGEX = &quot;Subject: Test from Apache JMeter &lt;&lt;&lt; current timestamp: ([0-9]{13}) &gt;&gt;&gt;&quot;;
	Pattern p = Pattern.compile(REGEX);

	header = sub.getRequestHeaders();
	Matcher m = p.matcher(header);
	  if (m.find()) {
		t = m.group(1);
		vars.put(&quot;sendtime_&quot; + cnt, t );
		log.info(&quot;Mail &quot; + cnt + &quot; send @ &quot; + t );
	  }

	//vars.put(&quot;mail_&quot; + cnt, header);
	//log.info(header);
	</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor SMTP" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleResult;
	import java.util.regex.Pattern;
	import java.util.regex.Matcher;


	cnt = ${__counter(TRUE,)};

	log.info(&quot;*******SMTP SAMPLER + &quot; + cnt + &quot; START**************&quot;);

	//sub = prev.getSubResults();
	sub = ctx.getPreviousResult(); 

	//system.currentmilis 13 uzunlukta
	String REGEX = &quot;[0-9]{13}&quot;;
	Pattern p = Pattern.compile(REGEX);

	log.info(&quot;-----------------------&quot;);
	log.info(sub.toString());

	log.info(&quot;cnt = &quot; + cnt);
	//for(SampleResult sub: subs) {
	  mail = sub.getResponseDataAsString();
	  Matcher m = p.matcher(mail);
	  if (m.find()) {
		t = m.group(0);
		vars.put(&quot;SENDTIME_&quot; + cnt, t );
		log.info(&quot;Mail Send Time id &quot; + cnt + &quot; = &quot; + t );
	  }

	  
	  //log.info(mail);
	  
	//}


	log.info(&quot;*******SMTP SAMPLER + &quot; + cnt + &quot; END**************&quot;);
	</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="BeanShell Listener" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleResult;
	import java.util.regex.Pattern;
	import java.util.regex.Matcher;

	log.info(&quot;*******SMTP SAMPLER START**************&quot;);
	log.info(&quot;SMTP SAmpler Post&quot;);
	subs = prev.getSubResults();
	//SampleResult subs=ctx.getPreviousResult(); 
	log.info(subs.toString());
	//system.currentmilis 13 uzunlukta
	String REGEX = &quot;[0-9]{13}&quot;;
	Pattern p = Pattern.compile(REGEX);
	cnt = 1;
	for(SampleResult sub: subs) {
	  log.info(&quot;-------------------------------------&quot;);
	  mail = sub.getResponseDataAsString();
	  Matcher m = p.matcher(mail);
	  if (m.find()) {
		t = m.group(0);
		vars.put(&quot;SENDTIME_&quot; + cnt, t );
		//log.info(&quot;Mail Send Time id &quot; + cnt + &quot; = &quot; + t );
		cnt++;
	  }
	  //log.info(&quot;cnt = &quot; + cnt);
	  
	  log.info(mail);
	  
	}

	log.info(&quot;*******SMTP SAMPLER END**************&quot;);
	</stringProp>
          </BeanShellListener>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(threadGroup1.wait_timer)}</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG 2 Mail Send DLP Text" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadGroup2.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threadGroup2.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1473789283000</longProp>
        <longProp name="ThreadGroup.end_time">1473789283000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
        <stringProp name="TestPlan.comments">Sending clear text messages with DLP</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Start" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(threadGroup2.users)}&quot; == &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Stop After" enabled="true">
          <stringProp name="IfController.condition">${sample_count} &gt; 120</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">2</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="TXT1" elementType="Argument">
              <stringProp name="Argument.name">TXT1</stringProp>
              <stringProp name="Argument.value">Metin 1 DLP_ 79436701850   Gün içinde dönüş sağlayabilir misin?</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT2" elementType="Argument">
              <stringProp name="Argument.name">TXT2</stringProp>
              <stringProp name="Argument.value">Metin 2  _DLP_ 62995305560</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT3" elementType="Argument">
              <stringProp name="Argument.name">TXT3</stringProp>
              <stringProp name="Argument.value">Metin 3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT4" elementType="Argument">
              <stringProp name="Argument.name">TXT4</stringProp>
              <stringProp name="Argument.value">Metin 4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT5" elementType="Argument">
              <stringProp name="Argument.name">TXT5</stringProp>
              <stringProp name="Argument.value">Metin 5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT6" elementType="Argument">
              <stringProp name="Argument.name">TXT6</stringProp>
              <stringProp name="Argument.value">Metin 6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT7" elementType="Argument">
              <stringProp name="Argument.name">TXT7</stringProp>
              <stringProp name="Argument.value">Metin 7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT8" elementType="Argument">
              <stringProp name="Argument.name">TXT8</stringProp>
              <stringProp name="Argument.value">Metin 8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT9" elementType="Argument">
              <stringProp name="Argument.name">TXT9</stringProp>
              <stringProp name="Argument.value">Metin 9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT10" elementType="Argument">
              <stringProp name="Argument.name">TXT10</stringProp>
              <stringProp name="Argument.value">Metin 10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT11" elementType="Argument">
              <stringProp name="Argument.name">TXT11</stringProp>
              <stringProp name="Argument.value">Metin 11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT12" elementType="Argument">
              <stringProp name="Argument.name">TXT12</stringProp>
              <stringProp name="Argument.value">Metin 12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT13" elementType="Argument">
              <stringProp name="Argument.name">TXT13</stringProp>
              <stringProp name="Argument.value">Metin 13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT14" elementType="Argument">
              <stringProp name="Argument.name">TXT14</stringProp>
              <stringProp name="Argument.value">Metin 14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT15" elementType="Argument">
              <stringProp name="Argument.name">TXT15</stringProp>
              <stringProp name="Argument.value">Metin 15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT16" elementType="Argument">
              <stringProp name="Argument.name">TXT16</stringProp>
              <stringProp name="Argument.value">Metin 16</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT17" elementType="Argument">
              <stringProp name="Argument.name">TXT17</stringProp>
              <stringProp name="Argument.value">Metin 17</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT18" elementType="Argument">
              <stringProp name="Argument.name">TXT18</stringProp>
              <stringProp name="Argument.value">Metin 18</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT19" elementType="Argument">
              <stringProp name="Argument.name">TXT19</stringProp>
              <stringProp name="Argument.value">Metin 19</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT20" elementType="Argument">
              <stringProp name="Argument.name">TXT20</stringProp>
              <stringProp name="Argument.value">Metin 20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT21" elementType="Argument">
              <stringProp name="Argument.name">TXT21</stringProp>
              <stringProp name="Argument.value">Metin 21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT22" elementType="Argument">
              <stringProp name="Argument.name">TXT22</stringProp>
              <stringProp name="Argument.value">Metin 22</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT23" elementType="Argument">
              <stringProp name="Argument.name">TXT23</stringProp>
              <stringProp name="Argument.value">Metin 23</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT24" elementType="Argument">
              <stringProp name="Argument.name">TXT24</stringProp>
              <stringProp name="Argument.value">Metin 24</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT25" elementType="Argument">
              <stringProp name="Argument.name">TXT25</stringProp>
              <stringProp name="Argument.value">Metin 25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT26" elementType="Argument">
              <stringProp name="Argument.name">TXT26</stringProp>
              <stringProp name="Argument.value">Metin 26</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT27" elementType="Argument">
              <stringProp name="Argument.name">TXT27</stringProp>
              <stringProp name="Argument.value">Metin 27</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT28" elementType="Argument">
              <stringProp name="Argument.name">TXT28</stringProp>
              <stringProp name="Argument.value">Metin 28</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT29" elementType="Argument">
              <stringProp name="Argument.name">TXT29</stringProp>
              <stringProp name="Argument.value">Metin 29</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT30" elementType="Argument">
              <stringProp name="Argument.name">TXT30</stringProp>
              <stringProp name="Argument.value">Metin 30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT31" elementType="Argument">
              <stringProp name="Argument.name">TXT31</stringProp>
              <stringProp name="Argument.value">Metin 31</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT32" elementType="Argument">
              <stringProp name="Argument.name">TXT32</stringProp>
              <stringProp name="Argument.value">Metin 32</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT33" elementType="Argument">
              <stringProp name="Argument.name">TXT33</stringProp>
              <stringProp name="Argument.value">Metin 33</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT34" elementType="Argument">
              <stringProp name="Argument.name">TXT34</stringProp>
              <stringProp name="Argument.value">Metin 34</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT35" elementType="Argument">
              <stringProp name="Argument.name">TXT35</stringProp>
              <stringProp name="Argument.value">Metin 35</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT36" elementType="Argument">
              <stringProp name="Argument.name">TXT36</stringProp>
              <stringProp name="Argument.value">Metin 36</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT37" elementType="Argument">
              <stringProp name="Argument.name">TXT37</stringProp>
              <stringProp name="Argument.value">Metin 37</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT38" elementType="Argument">
              <stringProp name="Argument.name">TXT38</stringProp>
              <stringProp name="Argument.value">Metin 38</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT39" elementType="Argument">
              <stringProp name="Argument.name">TXT39</stringProp>
              <stringProp name="Argument.value">Metin 39</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT40" elementType="Argument">
              <stringProp name="Argument.name">TXT40</stringProp>
              <stringProp name="Argument.value">Metin 40</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT41" elementType="Argument">
              <stringProp name="Argument.name">TXT41</stringProp>
              <stringProp name="Argument.value">Metin 41</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT42" elementType="Argument">
              <stringProp name="Argument.name">TXT42</stringProp>
              <stringProp name="Argument.value">Metin 42</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT43" elementType="Argument">
              <stringProp name="Argument.name">TXT43</stringProp>
              <stringProp name="Argument.value">Metin 43</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT44" elementType="Argument">
              <stringProp name="Argument.name">TXT44</stringProp>
              <stringProp name="Argument.value">Metin 44</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT45" elementType="Argument">
              <stringProp name="Argument.name">TXT45</stringProp>
              <stringProp name="Argument.value">Metin 45</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT46" elementType="Argument">
              <stringProp name="Argument.name">TXT46</stringProp>
              <stringProp name="Argument.value">Metin 46</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT47" elementType="Argument">
              <stringProp name="Argument.name">TXT47</stringProp>
              <stringProp name="Argument.value">Metin 47</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT48" elementType="Argument">
              <stringProp name="Argument.name">TXT48</stringProp>
              <stringProp name="Argument.value">Metin 48</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT49" elementType="Argument">
              <stringProp name="Argument.name">TXT49</stringProp>
              <stringProp name="Argument.value">Metin 49</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT50" elementType="Argument">
              <stringProp name="Argument.name">TXT50</stringProp>
              <stringProp name="Argument.value">Metin 50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT51" elementType="Argument">
              <stringProp name="Argument.name">TXT51</stringProp>
              <stringProp name="Argument.value">Metin 51</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT52" elementType="Argument">
              <stringProp name="Argument.name">TXT52</stringProp>
              <stringProp name="Argument.value">Metin 52</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT53" elementType="Argument">
              <stringProp name="Argument.name">TXT53</stringProp>
              <stringProp name="Argument.value">Metin 53</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT54" elementType="Argument">
              <stringProp name="Argument.name">TXT54</stringProp>
              <stringProp name="Argument.value">Metin 54</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT55" elementType="Argument">
              <stringProp name="Argument.name">TXT55</stringProp>
              <stringProp name="Argument.value">Metin 55</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT56" elementType="Argument">
              <stringProp name="Argument.name">TXT56</stringProp>
              <stringProp name="Argument.value">Metin 56</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT57" elementType="Argument">
              <stringProp name="Argument.name">TXT57</stringProp>
              <stringProp name="Argument.value">Metin 57</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT58" elementType="Argument">
              <stringProp name="Argument.name">TXT58</stringProp>
              <stringProp name="Argument.value">Metin 58</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT59" elementType="Argument">
              <stringProp name="Argument.name">TXT59</stringProp>
              <stringProp name="Argument.value">Metin 59</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT60" elementType="Argument">
              <stringProp name="Argument.name">TXT60</stringProp>
              <stringProp name="Argument.value">Metin 60</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT61" elementType="Argument">
              <stringProp name="Argument.name">TXT61</stringProp>
              <stringProp name="Argument.value">Metin 61</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT62" elementType="Argument">
              <stringProp name="Argument.name">TXT62</stringProp>
              <stringProp name="Argument.value">Metin 62</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT63" elementType="Argument">
              <stringProp name="Argument.name">TXT63</stringProp>
              <stringProp name="Argument.value">Metin 63</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT64" elementType="Argument">
              <stringProp name="Argument.name">TXT64</stringProp>
              <stringProp name="Argument.value">Metin 64</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT65" elementType="Argument">
              <stringProp name="Argument.name">TXT65</stringProp>
              <stringProp name="Argument.value">Metin 65</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT66" elementType="Argument">
              <stringProp name="Argument.name">TXT66</stringProp>
              <stringProp name="Argument.value">Metin 66</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT67" elementType="Argument">
              <stringProp name="Argument.name">TXT67</stringProp>
              <stringProp name="Argument.value">Metin 67</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT68" elementType="Argument">
              <stringProp name="Argument.name">TXT68</stringProp>
              <stringProp name="Argument.value">Metin 68</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT69" elementType="Argument">
              <stringProp name="Argument.name">TXT69</stringProp>
              <stringProp name="Argument.value">Metin 69</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT70" elementType="Argument">
              <stringProp name="Argument.name">TXT70</stringProp>
              <stringProp name="Argument.value">Metin 70</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT71" elementType="Argument">
              <stringProp name="Argument.name">TXT71</stringProp>
              <stringProp name="Argument.value">Metin 71</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT72" elementType="Argument">
              <stringProp name="Argument.name">TXT72</stringProp>
              <stringProp name="Argument.value">Metin 72</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT73" elementType="Argument">
              <stringProp name="Argument.name">TXT73</stringProp>
              <stringProp name="Argument.value">Metin 73</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT74" elementType="Argument">
              <stringProp name="Argument.name">TXT74</stringProp>
              <stringProp name="Argument.value">Metin 74</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT75" elementType="Argument">
              <stringProp name="Argument.name">TXT75</stringProp>
              <stringProp name="Argument.value">Metin 75</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT76" elementType="Argument">
              <stringProp name="Argument.name">TXT76</stringProp>
              <stringProp name="Argument.value">Metin 76</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT77" elementType="Argument">
              <stringProp name="Argument.name">TXT77</stringProp>
              <stringProp name="Argument.value">Metin 77</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT78" elementType="Argument">
              <stringProp name="Argument.name">TXT78</stringProp>
              <stringProp name="Argument.value">Metin 78</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT79" elementType="Argument">
              <stringProp name="Argument.name">TXT79</stringProp>
              <stringProp name="Argument.value">Metin 79</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT80" elementType="Argument">
              <stringProp name="Argument.name">TXT80</stringProp>
              <stringProp name="Argument.value">Metin 80</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT81" elementType="Argument">
              <stringProp name="Argument.name">TXT81</stringProp>
              <stringProp name="Argument.value">Metin 81</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT82" elementType="Argument">
              <stringProp name="Argument.name">TXT82</stringProp>
              <stringProp name="Argument.value">Metin 82</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT83" elementType="Argument">
              <stringProp name="Argument.name">TXT83</stringProp>
              <stringProp name="Argument.value">Metin 83</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT84" elementType="Argument">
              <stringProp name="Argument.name">TXT84</stringProp>
              <stringProp name="Argument.value">Metin 84</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT85" elementType="Argument">
              <stringProp name="Argument.name">TXT85</stringProp>
              <stringProp name="Argument.value">Metin 85</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT86" elementType="Argument">
              <stringProp name="Argument.name">TXT86</stringProp>
              <stringProp name="Argument.value">Metin 86</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT87" elementType="Argument">
              <stringProp name="Argument.name">TXT87</stringProp>
              <stringProp name="Argument.value">Metin 87</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT88" elementType="Argument">
              <stringProp name="Argument.name">TXT88</stringProp>
              <stringProp name="Argument.value">Metin 88</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT89" elementType="Argument">
              <stringProp name="Argument.name">TXT89</stringProp>
              <stringProp name="Argument.value">Metin 89</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT90" elementType="Argument">
              <stringProp name="Argument.name">TXT90</stringProp>
              <stringProp name="Argument.value">Metin 90</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT91" elementType="Argument">
              <stringProp name="Argument.name">TXT91</stringProp>
              <stringProp name="Argument.value">Metin 91</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT92" elementType="Argument">
              <stringProp name="Argument.name">TXT92</stringProp>
              <stringProp name="Argument.value">Metin 92</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT93" elementType="Argument">
              <stringProp name="Argument.name">TXT93</stringProp>
              <stringProp name="Argument.value">Metin 93</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT94" elementType="Argument">
              <stringProp name="Argument.name">TXT94</stringProp>
              <stringProp name="Argument.value">Metin 94</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT95" elementType="Argument">
              <stringProp name="Argument.name">TXT95</stringProp>
              <stringProp name="Argument.value">Metin 95</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT96" elementType="Argument">
              <stringProp name="Argument.name">TXT96</stringProp>
              <stringProp name="Argument.value">Metin 96</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT97" elementType="Argument">
              <stringProp name="Argument.name">TXT97</stringProp>
              <stringProp name="Argument.value">Metin 97</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT98" elementType="Argument">
              <stringProp name="Argument.name">TXT98</stringProp>
              <stringProp name="Argument.value">Metin 98</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT99" elementType="Argument">
              <stringProp name="Argument.name">TXT99</stringProp>
              <stringProp name="Argument.value">Metin 99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT100" elementType="Argument">
              <stringProp name="Argument.name">TXT100</stringProp>
              <stringProp name="Argument.value">Metin 100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT101" elementType="Argument">
              <stringProp name="Argument.name">TXT101</stringProp>
              <stringProp name="Argument.value">Metin 101</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT102" elementType="Argument">
              <stringProp name="Argument.name">TXT102</stringProp>
              <stringProp name="Argument.value">Metin 102</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT103" elementType="Argument">
              <stringProp name="Argument.name">TXT103</stringProp>
              <stringProp name="Argument.value">Metin 103</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT104" elementType="Argument">
              <stringProp name="Argument.name">TXT104</stringProp>
              <stringProp name="Argument.value">Metin 104</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT105" elementType="Argument">
              <stringProp name="Argument.name">TXT105</stringProp>
              <stringProp name="Argument.value">Metin 105</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT106" elementType="Argument">
              <stringProp name="Argument.name">TXT106</stringProp>
              <stringProp name="Argument.value">Metin 106</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT107" elementType="Argument">
              <stringProp name="Argument.name">TXT107</stringProp>
              <stringProp name="Argument.value">Metin 107</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT108" elementType="Argument">
              <stringProp name="Argument.name">TXT108</stringProp>
              <stringProp name="Argument.value">Metin 108</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT109" elementType="Argument">
              <stringProp name="Argument.name">TXT109</stringProp>
              <stringProp name="Argument.value">Metin 109</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT110" elementType="Argument">
              <stringProp name="Argument.name">TXT110</stringProp>
              <stringProp name="Argument.value">Metin 110</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT111" elementType="Argument">
              <stringProp name="Argument.name">TXT111</stringProp>
              <stringProp name="Argument.value">Metin 111</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT112" elementType="Argument">
              <stringProp name="Argument.name">TXT112</stringProp>
              <stringProp name="Argument.value">Metin 112</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT113" elementType="Argument">
              <stringProp name="Argument.name">TXT113</stringProp>
              <stringProp name="Argument.value">Metin 113</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT114" elementType="Argument">
              <stringProp name="Argument.name">TXT114</stringProp>
              <stringProp name="Argument.value">Metin 114</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT115" elementType="Argument">
              <stringProp name="Argument.name">TXT115</stringProp>
              <stringProp name="Argument.value">Metin 115</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT116" elementType="Argument">
              <stringProp name="Argument.name">TXT116</stringProp>
              <stringProp name="Argument.value">Metin 116</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT117" elementType="Argument">
              <stringProp name="Argument.name">TXT117</stringProp>
              <stringProp name="Argument.value">Metin 117</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT118" elementType="Argument">
              <stringProp name="Argument.name">TXT118</stringProp>
              <stringProp name="Argument.value">Metin 118</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT119" elementType="Argument">
              <stringProp name="Argument.name">TXT119</stringProp>
              <stringProp name="Argument.value">Metin 119</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="TXT120" elementType="Argument">
              <stringProp name="Argument.name">TXT120</stringProp>
              <stringProp name="Argument.value">Metin 120</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Sample Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">sample_count</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Random Msg" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
	import java.text.DateFormat;
	import java.text.SimpleDateFormat;

	String[] query = new String[]{&quot;_DLP_ 79436701850&quot;, &quot;_DLP_ 70081794860&quot;, &quot;Merhaba Dünya&quot;, &quot;Test&quot;, &quot;Test123&quot;, &quot;Ahmet 13321445412&quot;};
	Random random = new Random();

	int i = random.nextInt(query.length);

	DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);
	Date myDate = new Date();
	currentDate = dateFormat.format(myDate);

	log.info(&quot;Random text @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  query[i]);
	print(&quot;Random text @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  query[i]);

	//print(&quot;*******Random text: &quot; + query[i]);
	//log.info(&quot;*******Random text: &quot; + query[i]);
	vars.put(&quot;MSG&quot;, query[i]);


	</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Msg" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

String sIndx = vars.get(&quot;sample_count&quot;);
int indx = Integer.parseInt(sIndx);
String message = vars.get(&quot;TXT&quot; + indx.toString());
     
DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);
Date myDate = new Date();
currentDate = dateFormat.format(myDate);

log.info(&quot;Text &quot; + indx + &quot; @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  message);
print(&quot;Text &quot; + indx + &quot; @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  message);

vars.put(&quot;MSG&quot;, message );</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Save to CSV" enabled="true">
          <stringProp name="TestPlan.comments">save random message inputs to a csv file</stringProp>
          <stringProp name="BeanShellSampler.query">    //String fileName = vars.get(&quot;CSVFILENAME&quot;) + &quot;.csv&quot;;
	String FILENAME = &quot;/home/koray/codes/TEZ/msgs.csv&quot;;
     String FILENAME2 = &quot;/home/koray/codes/TEZ/sample_count2.csv&quot;;
	FileWriter fstream = new FileWriter(FILENAME, true);
	BufferedWriter out = new BufferedWriter(fstream);

	FileWriter fstream2 = new FileWriter(FILENAME2, true);
	BufferedWriter out2 = new BufferedWriter(fstream2);

	String msg = vars.get(&quot;MSG&quot;);
	msg = msg.replaceAll(&quot;[\n\r]&quot;, &quot; &quot;);
    
	out.write(msg);
	out.write(System.getProperty(&quot;line.separator&quot;));
	out.close();
	fstream.close();


     String msg2 = vars.get(&quot;sample_count&quot;);
    	out2.write(System.getProperty(&quot;line.separator&quot;));
	out2.write(msg2);
	out2.close();
	fstream2.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="true">
          <stringProp name="SMTPSampler.server">${__P(smtp.server)}</stringProp>
          <stringProp name="SMTPSampler.serverPort">${__P(smtp.port)}</stringProp>
          <stringProp name="SMTPSampler.mailFrom">test${sample_count}@test.local</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">test1@test.local</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">${__P(smtp.server)}_Send_DLP_Text</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">true</stringProp>
          <stringProp name="SMTPSampler.message">Message from JMeter Test 2 thread # ${__threadNum}
${MSG}
</stringProp>
          <stringProp name="SMTPSampler.plainBody">false</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">false</stringProp>
          <stringProp name="SMTPSampler.password"></stringProp>
          <stringProp name="SMTPSampler.username"></stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>true</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor SMTP2" enabled="false">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleResult;
	import java.util.regex.Pattern;
	import java.util.regex.Matcher;

	sub = ctx.getPreviousResult(); 
	//subs = prev.getSubResults();
	cnt = ${__counter(TRUE,)};
	vars.put(&quot;mycnt&quot;, cnt.toString());

	//system.currentmilis 13 uzunlukta
	String REGEX = &quot;Subject: Test from Apache JMeter &lt;&lt;&lt; current timestamp: ([0-9]{13}) &gt;&gt;&gt;&quot;;
	Pattern p = Pattern.compile(REGEX);

	header = sub.getRequestHeaders();
	Matcher m = p.matcher(header);
	  if (m.find()) {
		t = m.group(1);
		vars.put(&quot;sendtime_&quot; + cnt, t );
		log.info(&quot;Mail &quot; + cnt + &quot; send @ &quot; + t );
	  }

	//vars.put(&quot;mail_&quot; + cnt, header);
	//log.info(header);
	</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellListener guiclass="TestBeanGUI" testclass="BeanShellListener" testname="BeanShell Listener" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleResult;
	import java.util.regex.Pattern;
	import java.util.regex.Matcher;

	log.info(&quot;*******SMTP SAMPLER START**************&quot;);
	log.info(&quot;SMTP SAmpler Post&quot;);
	subs = prev.getSubResults();
	//SampleResult subs=ctx.getPreviousResult(); 
	log.info(subs.toString());
	//system.currentmilis 13 uzunlukta
	String REGEX = &quot;[0-9]{13}&quot;;
	Pattern p = Pattern.compile(REGEX);
	cnt = 1;
	for(SampleResult sub: subs) {
	  log.info(&quot;-------------------------------------&quot;);
	  mail = sub.getResponseDataAsString();
	  Matcher m = p.matcher(mail);
	  if (m.find()) {
		t = m.group(0);
		vars.put(&quot;SENDTIME_&quot; + cnt, t );
		//log.info(&quot;Mail Send Time id &quot; + cnt + &quot; = &quot; + t );
		cnt++;
	  }
	  //log.info(&quot;cnt = &quot; + cnt);
	  
	  log.info(mail);
	  
	}

	log.info(&quot;*******SMTP SAMPLER END**************&quot;);
	</stringProp>
          </BeanShellListener>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor SMTP" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleResult;
	import java.util.regex.Pattern;
	import java.util.regex.Matcher;


	cnt = ${__counter(TRUE,)};

	log.info(&quot;*******SMTP SAMPLER + &quot; + cnt + &quot; START**************&quot;);

	//sub = prev.getSubResults();
	sub = ctx.getPreviousResult(); 

	//system.currentmilis 13 uzunlukta
	String REGEX = &quot;[0-9]{13}&quot;;
	Pattern p = Pattern.compile(REGEX);

	log.info(&quot;-----------------------&quot;);
	log.info(sub.toString());

	log.info(&quot;cnt = &quot; + cnt);
	//for(SampleResult sub: subs) {
	  mail = sub.getResponseDataAsString();
	  Matcher m = p.matcher(mail);
	  if (m.find()) {
		t = m.group(0);
		vars.put(&quot;SENDTIME_&quot; + cnt, t );
		log.info(&quot;Mail Send Time id &quot; + cnt + &quot; = &quot; + t );
	  }

	  
	  //log.info(mail);
	  
	//}


	log.info(&quot;*******SMTP SAMPLER + &quot; + cnt + &quot; END**************&quot;);
	</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(threadGroup2.wait_timer)}</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG 3 Mail Send Attachment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadGroup3.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threadGroup3.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1493239260000</longProp>
        <longProp name="ThreadGroup.end_time">1493240340000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">sending mails with attachments</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Start" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(threadGroup3.users)}&quot; == &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Stop After" enabled="true">
          <stringProp name="IfController.condition">${sample_count} &gt; 120</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Sample Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">sample_count</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Attachment" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

File folder = new File(&quot;/home/koray/Documents/TEZ/TEST&quot;);
File [] docs = folder.listFiles();
N = docs.length;

int cnt = 0;
String sIndx = vars.get(&quot;sample_count&quot;);
int idx = Integer.parseInt(sIndx);

log.info(&quot;********STARTING BEANSHELL SAMPLER************&quot;);
String [] files = new String[N];
for (File file: docs) {
	if (file.getName().endsWith(&quot;.xls&quot;) || file.getName().endsWith(&quot;.doc&quot;) || file.getName().endsWith(&quot;.docx&quot;) || file.getName().endsWith(&quot;.odt&quot;) || file.getName().endsWith(&quot;.pdf&quot;)) {
		vars.put(&quot;DOSYA_&quot; + cnt, file.getPath());
		//log.info(&quot;Dosya id: @ thread &quot; + ${__threadNum} + &quot; = &quot; + + cnt);
		files[cnt] = file.getPath();
		cnt++;
	}
}

//int idx = new Random().nextInt(N);

DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);
Date myDate = new Date();
currentDate = dateFormat.format(myDate);

log.info(&quot;CURRENTFILE &quot; + sIndx + &quot; @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  files[idx]);
print(&quot;CURRENTFILE &quot; + sIndx + &quot;@ &quot;  + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  files[idx]);
vars.put(&quot;CURRENTFILE&quot;, files[idx]);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Random Attachment" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

File folder = new File(&quot;/home/koray/Documents/TEZ/TEST&quot;);
File [] docs = folder.listFiles();
N = docs.length;

int cnt = 0;
log.info(&quot;********STARTING BEANSHELL SAMPLER************&quot;);
String [] files = new String[N];
for (File file: docs) {
	if (file.getName().endsWith(&quot;.doc&quot;) || file.getName().endsWith(&quot;.docx&quot;) || file.getName().endsWith(&quot;.odt&quot;) || file.getName().endsWith(&quot;.pdf&quot;)) {
		vars.put(&quot;DOSYA_&quot; + cnt, file.getPath());
		log.info(&quot;Dosya id: @ thread &quot; + ${__threadNum} + &quot; = &quot; + + cnt);
		files[cnt] = file.getPath();
		cnt++;
	}
}

int idx = new Random().nextInt(N);

DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);
Date myDate = new Date();
currentDate = dateFormat.format(myDate);

log.info(&quot;CURRENTFILE @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  files[idx]);
print(&quot;CURRENTFILE @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  files[idx]);
vars.put(&quot;CURRENTFILE&quot;, files[idx]);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Save to CSV" enabled="true">
          <stringProp name="TestPlan.comments">save random message inputs to a csv file</stringProp>
          <stringProp name="BeanShellSampler.query">//String fileName = vars.get(&quot;CSVFILENAME&quot;) + &quot;.csv&quot;;
	String FILENAME = &quot;/home/koray/codes/TEZ/msgs.csv&quot;;
     String FILENAME2 = &quot;/home/koray/codes/TEZ/sample_count3.csv&quot;;
	FileWriter fstream = new FileWriter(FILENAME, true);
	BufferedWriter out = new BufferedWriter(fstream);
	FileWriter fstream2 = new FileWriter(FILENAME2, true);
	BufferedWriter out2 = new BufferedWriter(fstream2);

	out.write(vars.get(&quot;CURRENTFILE&quot;));
	out.write(System.getProperty(&quot;line.separator&quot;));

	out.close();
	fstream.close();



     String msg2 = vars.get(&quot;sample_count&quot;);
    	out2.write(System.getProperty(&quot;line.separator&quot;));
	out2.write(msg2);
	out2.close();
	fstream2.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="true">
          <stringProp name="SMTPSampler.server">${__P(smtp.server)}</stringProp>
          <stringProp name="SMTPSampler.serverPort">${__P(smtp.port)}</stringProp>
          <stringProp name="SMTPSampler.mailFrom">test${sample_count}@test.local</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">test1@test.local</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">${__P(smtp.server)}_Send_Attachment</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">true</stringProp>
          <stringProp name="SMTPSampler.message">Message from JMeter Test 3 thread # ${__threadNum}</stringProp>
          <stringProp name="SMTPSampler.plainBody">true</stringProp>
          <stringProp name="SMTPSampler.attachFile">${CURRENTFILE}</stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">false</stringProp>
          <stringProp name="SMTPSampler.password"></stringProp>
          <stringProp name="SMTPSampler.username"></stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">true</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(threadGroup3.wait_timer)}</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG 4 Mail Send Attachment OCR" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadGroup4.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threadGroup4.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1493239260000</longProp>
        <longProp name="ThreadGroup.end_time">1493240340000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">sending mails with ocr attachments</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Start" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(threadGroup4.users)}&quot; == &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Stop After" enabled="true">
          <stringProp name="IfController.condition">${sample_count} &gt; 120</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">2</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Sample Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">sample_count</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Attachment" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

File folder = new File(&quot;/home/koray/Documents/TEZ/TEST_OCR&quot;);
File [] docs = folder.listFiles();
N = docs.length;

int cnt = 0;
String sIndx = vars.get(&quot;sample_count&quot;);
int idx = Integer.parseInt(sIndx);

log.info(&quot;********STARTING BEANSHELL SAMPLER************&quot;);
String [] files = new String[N];
for (File file: docs) {
	if (file.getName().endsWith(&quot;.xls&quot;) || file.getName().endsWith(&quot;.doc&quot;) || file.getName().endsWith(&quot;.docx&quot;) || file.getName().endsWith(&quot;.odt&quot;) || file.getName().endsWith(&quot;.pdf&quot;)) {
		vars.put(&quot;DOSYA_&quot; + cnt, file.getPath());
		//log.info(&quot;Dosya id: @ thread &quot; + ${__threadNum} + &quot; = &quot; + + cnt);
		files[cnt] = file.getPath();
		cnt++;
	}
}

//int idx = new Random().nextInt(N);

DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);
Date myDate = new Date();
currentDate = dateFormat.format(myDate);

log.info(&quot;CURRENTFILE &quot; + sIndx + &quot; @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  files[idx]);
print(&quot;CURRENTFILE &quot; + sIndx + &quot;@ &quot;  + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  files[idx]);
vars.put(&quot;CURRENTFILE&quot;, files[idx]);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Random Attachment" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

File folder = new File(&quot;/home/koray/Documents/TEZ/TEST&quot;);
File [] docs = folder.listFiles();
N = docs.length;

int cnt = 0;
log.info(&quot;********STARTING BEANSHELL SAMPLER************&quot;);
String [] files = new String[N];
for (File file: docs) {
	if (file.getName().endsWith(&quot;.doc&quot;) || file.getName().endsWith(&quot;.docx&quot;) || file.getName().endsWith(&quot;.odt&quot;) || file.getName().endsWith(&quot;.pdf&quot;)) {
		vars.put(&quot;DOSYA_&quot; + cnt, file.getPath());
		log.info(&quot;Dosya id: @ thread &quot; + ${__threadNum} + &quot; = &quot; + + cnt);
		files[cnt] = file.getPath();
		cnt++;
	}
}

int idx = new Random().nextInt(N);

DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy/MM/dd HH:mm:ss&quot;);
Date myDate = new Date();
currentDate = dateFormat.format(myDate);

log.info(&quot;CURRENTFILE @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  files[idx]);
print(&quot;CURRENTFILE @ &quot; + currentDate + &quot; @ thread &quot; + ${__threadNum} + &quot; = &quot; +  files[idx]);
vars.put(&quot;CURRENTFILE&quot;, files[idx]);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Save to CSV" enabled="true">
          <stringProp name="TestPlan.comments">save random message inputs to a csv file</stringProp>
          <stringProp name="BeanShellSampler.query">//String fileName = vars.get(&quot;CSVFILENAME&quot;) + &quot;.csv&quot;;
String FILENAME = &quot;/home/koray/codes/TEZ/msgs.csv&quot;;
String FILENAME2 = &quot;/home/koray/codes/TEZ/sample_count4.csv&quot;;
FileWriter fstream = new FileWriter(FILENAME, true);
BufferedWriter out = new BufferedWriter(fstream);
FileWriter fstream2 = new FileWriter(FILENAME2, true);
BufferedWriter out2 = new BufferedWriter(fstream2);

out.write(vars.get(&quot;CURRENTFILE&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));

out.close();
fstream.close();



String msg2 = vars.get(&quot;sample_count&quot;);
out2.write(System.getProperty(&quot;line.separator&quot;));
out2.write(msg2);
out2.close();
fstream2.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP Sampler" enabled="true">
          <stringProp name="SMTPSampler.server">${__P(smtp.server)}</stringProp>
          <stringProp name="SMTPSampler.serverPort">${__P(smtp.port)}</stringProp>
          <stringProp name="SMTPSampler.mailFrom">test${sample_count}@test.local</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">test1@test.local</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">${__P(smtp.server)}_Send_Attachment</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">true</stringProp>
          <stringProp name="SMTPSampler.message">Message from JMeter Test 4 thread # ${__threadNum}
</stringProp>
          <stringProp name="SMTPSampler.plainBody">true</stringProp>
          <stringProp name="SMTPSampler.attachFile">${CURRENTFILE}</stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">false</stringProp>
          <stringProp name="SMTPSampler.password"></stringProp>
          <stringProp name="SMTPSampler.username"></stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">true</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">${__P(threadGroup4.wait_timer)}</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG 5 Clear Results" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(threadGroup5.duration)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadGroup5.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threadGroup5.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1481708450000</longProp>
        <longProp name="ThreadGroup.end_time">1481708450000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">clear the results saved by sampler files and email</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(threadGroup5.users)}&quot; == &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="Mail Reader Sampler Delete" enabled="true">
          <stringProp name="host_type">pop3s</stringProp>
          <stringProp name="folder">INBOX</stringProp>
          <stringProp name="host">mail.test.local</stringProp>
          <stringProp name="username">test1</stringProp>
          <stringProp name="password">k7o0r4</stringProp>
          <intProp name="num_messages">-1</intProp>
          <boolProp name="delete">true</boolProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">true</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
        </MailReaderSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler CSV Reset" enabled="true">
          <stringProp name="BeanShellSampler.query">deleteFile(fpath) {
		File file = new File(fpath);
		log.info(&quot;*********BeanShell Sampler CSV Reset Started***********&quot;);
		print(&quot;*********BeanShell Sampler CSV Reset Started***********&quot;);
		if (file.exists())
		{
			if (!file.delete())
			{
				log.error(&quot;Couldn&apos;t delete file&quot;);
				print(&quot;Couldn&apos;t delete file&quot;);
			}
			else
			{
				log.info(&quot;Successfully deleted file: &quot; + file.getName());
				print(&quot;Successfully deleted file: &quot; + file.getName());
			}
		}else {
			log.info(&quot;File not found&quot;);
		}
	}
	deleteFile(&quot;/home/koray/codes/TEZ/mydlp_log_cnt.csv&quot;);
	deleteFile(&quot;/home/koray/codes/TEZ/msgs.csv&quot;);
	deleteFile(&quot;/home/koray/codes/TEZ/sample_count1.csv&quot;);
	deleteFile(&quot;/home/koray/codes/TEZ/sample_count2.csv&quot;);
	deleteFile(&quot;/home/koray/codes/TEZ/sample_count3.csv&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG 6 MyDLP Log Count" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(threadGroup6.duration)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadGroup6.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threadGroup6.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1482334669000</longProp>
        <longProp name="ThreadGroup.end_time">1482334669000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">count the mydlp dlp logs from web page.</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(threadGroup6.users)}&quot; == &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
          <stringProp name="TestPlan.comments">MyDLP log case</stringProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">mydlp.test.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Post Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="j_username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">mydlp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">j_username</stringProp>
              </elementProp>
              <elementProp name="j_password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">mydlp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">j_password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">mydlp.test.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/j_spring_security_check</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request Get Logs" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">mydlp.test.local</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/spring/api/logs</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Total Log Records JSON Extractor" enabled="true">
            <stringProp name="TestPlan.comments">Get the total log record count</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">recordsTotal_JSON</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.recordsTotal</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler Save to CSV" enabled="true">
          <stringProp name="TestPlan.comments">write record count to a file mydlp_log_cnt.csv</stringProp>
          <stringProp name="BeanShellSampler.query">//String fileName = vars.get(&quot;CSVFILENAME&quot;) + &quot;.csv&quot;;
	FileWriter fstream = new FileWriter(&quot;/home/koray/codes/TEZ/mydlp_log_cnt.csv&quot;, false);
	BufferedWriter out = new BufferedWriter(fstream);

	out.write(vars.get(&quot;recordsTotal_JSON&quot;));
	print(&quot;MyDLP Log Kaydi: &quot; + vars.get(&quot;recordsTotal_JSON&quot;));
	out.write(System.getProperty(&quot;line.separator&quot;));

	out.close();
	fstream.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="-1565563358">recordsTotal</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">16</intProp>
        </ResponseAssertion>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TG 7 Mail Reader" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(threadGroup7.duration)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadGroup7.users)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(threadGroup7.rampup)}</stringProp>
        <longProp name="ThreadGroup.start_time">1473790348000</longProp>
        <longProp name="ThreadGroup.end_time">1473790348000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">mail reader parser</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Start" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(threadGroup7.users)}&quot; == &quot;0&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration"></stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="totalMessages" elementType="Argument">
              <stringProp name="Argument.name">totalMessages</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.desc">beklenen mesaj sayisi</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="totalLeakedMessages" elementType="Argument">
              <stringProp name="Argument.name">totalLeakedMessages</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.desc">beklenen dlp mesajlar sayisi</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CONDITION" elementType="Argument">
              <stringProp name="Argument.name">CONDITION</stringProp>
              <stringProp name="Argument.value">TRUE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${CONDITION}</stringProp>
        </WhileController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${__P(threadGroup7.wait_timer)}</stringProp>
          </ConstantTimer>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell MSGS Mail Count" enabled="true">
            <stringProp name="TestPlan.comments">Count the messages from file. This file generated from sender thread groups.</stringProp>
            <stringProp name="BeanShellSampler.query">String FILENAME = &quot;./msgs.csv&quot;;
FileInputStream fileInputStream = new FileInputStream(FILENAME);
InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);//An InputStreamReader is a bridge from byte streams to character streams
log.info(&quot;******************Mail Count started*************&quot;);
print(&quot;******************Mail Count started*************&quot;);
BufferedReader br = new BufferedReader(inputStreamReader);
//String line = br.readLine();
String line = &quot;&quot;;
cnt_mail = 0;
//while(line != null)
do
{
  line = br.readLine();
  //log.info(&quot;line = &quot; + line);
  if (line == null) break;
  cnt_mail = cnt_mail + 1;
} while(line != null);

print(&quot;MSGS Mail count: &quot; + cnt_mail);
log.info(&quot;MSGS Mail count: &quot; + cnt_mail);
vars.put(&quot;MSGS_COUNT&quot;, Integer.toString(cnt_mail));
inputStreamReader.close();
fileInputStream.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="Mail Reader Sampler Count OK" enabled="true">
            <stringProp name="host_type">pop3s</stringProp>
            <stringProp name="folder">INBOX</stringProp>
            <stringProp name="host">mail.test.local</stringProp>
            <stringProp name="username">test1</stringProp>
            <stringProp name="password">k7o0r4</stringProp>
            <intProp name="num_messages">-1</intProp>
            <boolProp name="headerOnly">true</boolProp>
            <boolProp name="delete">false</boolProp>
            <stringProp name="SMTPSampler.useSSL">false</stringProp>
            <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
            <stringProp name="SMTPSampler.trustAllCerts">true</stringProp>
            <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
            <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
            <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          </MailReaderSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell Sampler MailCount OK" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//mailr_sampler = ctx.getPreviousSampler();
//MAILR_CNT = 10;
log.info(&quot;MailCount OK Sampler started&quot;);
String resString = prev.getResponseDataAsString();
log.info(&quot;------RES:-------&quot; + resString);
print(&quot;RESPONSE: &quot; + resString);
String [] resWords = resString.trim().split(&quot; &quot;);
//mailrCount = Integer.parseInt(resWords[0]);
String mailrCount = resWords[0].trim();
//mailrCount = mailrCount.replaceAll(&quot; &quot;,&quot;&quot;).replaceAll(&quot;\n&quot;, &quot;&quot;).replaceAll(&quot;\r&quot;, &quot;&quot;);
//vars.put(&quot;MAILR_COUNT&quot;, mailrCount);
log.info(&quot;MailRCount: &quot; + mailrCount);
print(&quot;MailRCount: &quot; + mailrCount);
print(&quot;Messages Total: &quot; + props.get(&quot;messages.total&quot;));

//String strTotalMessages = props.get(&quot;messages.total&quot;).trim();
String strMsgsCount = vars.get(&quot;MSGS_COUNT&quot;);
//String strTotalMesssages = vars.get(&quot;totalMessages&quot;);

if (strMsgsCount.equals(mailrCount) ) {
	vars.put(&quot;CONDITION&quot;, &quot;FALSE&quot;);
	print(&quot;MailRCount equals to totalMessages&quot;);
	print(&quot;CONDITION = &quot; + vars.get(&quot;CONDITION&quot;));
	print(&quot;messages.total = &quot; + strMsgsCount + &quot; set ediliyor...&quot;);
	props.put(&quot;messages.total&quot;, strMsgsCount);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="Mail Reader Sampler" enabled="true">
          <stringProp name="host_type">pop3s</stringProp>
          <stringProp name="folder">INBOX</stringProp>
          <stringProp name="host">mail.test.local</stringProp>
          <stringProp name="username">test1</stringProp>
          <stringProp name="password">k7o0r4</stringProp>
          <intProp name="num_messages">-1</intProp>
          <boolProp name="headerOnly">true</boolProp>
          <boolProp name="delete">false</boolProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">true</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">true</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
        </MailReaderSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor MAILR" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleResult;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import java.util.Calendar;
import java.lang.Long;

strdate_to_milis(dt) {
	//24 hour icin HH kullanilmali!
	SimpleDateFormat sdf = new SimpleDateFormat(&quot;EEE, dd MMM yyyy HH:mm:ss zzz&quot;);
	String dateInString = dt;
	Date date = sdf.parse(dateInString);
     Calendar calendar = Calendar.getInstance();
     calendar.setTime(date);
     return calendar.getTimeInMillis();
}

is_emailrelay_testing(sbj) {
	String [] sbjArr = sbj.trim().split(&quot;_&quot;);
     String sbjStr = sbjArr[0].trim();
     return sbjStr.toLowerCase().equals(&quot;emailrelay&quot;);
}

is_mydlp_testing(sbj) {
	String [] sbjArr = sbj.trim().split(&quot;_&quot;);
     String sbjStr = sbjArr[0].trim();
     return sbjStr.toLowerCase().equals(&quot;mydlp&quot;);
}

log.info(&quot;MAIL Reader Post &quot;);
log.info(&quot;*******MAIL READER START**************&quot;);
subs = prev.getSubResults();
//sub = ctx.getPreviousResult(); 

log.info(&quot;++++++++++++++++++++++++++&quot;);
//log.info(sub.toString());

//system.currentmilis 13 uzunlukta
String REGEX = &quot;for &lt;.*&gt;; *(.*)&quot;;
Pattern p_r = Pattern.compile(REGEX);
Matcher m_r = null;

String REGEX_S = &quot;Subject: .* &lt;&lt;&lt; current timestamp: ([0-9]{13}) &gt;&gt;&gt;&quot;;
Pattern p_s = Pattern.compile(REGEX_S);
Matcher m_s = null;

String REGEX_SBJ = &quot;Subject: *(.*) &lt;&lt;&lt; current timestamp: ([0-9]{13}) &gt;&gt;&gt;&quot;;
//String REGEX_SBJ2 = &quot;Subject: ([a-zA-Z]+)_.* &lt;&lt;&lt; current timestamp: ([0-9]{13}) &gt;&gt;&gt;&quot;;
Pattern p_sbj = Pattern.compile(REGEX_SBJ);
Matcher m_sbj = null;

String REGEX_DLP = &quot;X-MailRelay-DLP: 1&quot;;
Pattern p_dlp = Pattern.compile(REGEX_DLP);
Matcher m_dlp = null;

String REGEX_FROM = &quot;From: test([0-9]+)@test.local&quot;;
Pattern p_from = Pattern.compile(REGEX_FROM);
Matcher m_from = null;

cnt = 1;
cnt_dlp_mail = 0;
boolean emailrelay_testing = false;
boolean mydlp_testing = false;


for(SampleResult sub: subs) {
  headers = sub.getResponseHeaders();

  // epostadaki subject &lt;&lt; kadar olan kisim veri dosyasi adi olacak
  if ( cnt == 1 ) {
	m_sbj = p_sbj.matcher(headers);
	if ( m_sbj.find() ) {
		sbj_file = m_sbj.group(1);
		log.info(&quot;CSVFILENAME :&quot; + sbj_file);
		print(&quot;CSVFILENAME: &quot; + sbj_file);
		vars.put(&quot;CSVFILENAME&quot;, sbj_file);
		if (is_emailrelay_testing(sbj_file)) {
		     log.info(&quot;--------EmailRelay DLP Testing-----------&quot;);
			//vars.put(&quot;TESTING&quot;, &quot;EMALIRELAY&quot;);
			emailrelay_testing = true;
		}else if (is_mydlp_testing(sbj_file)) {
		     log.info(&quot;--------MyDLP Testing-----------&quot;);  			
			//vars.put(&quot;TESTING&quot;, &quot;MYDLP&quot;);
			mydlp_testing = true;
		}
	} else {
		log.warning(&quot;------------REGEX_SBJ Subject beklendigi gibi gelmedi!--------------&quot;);
	}
  }

  //log.info(&quot;DLP Mail Count&quot;);
  //DLP Count for EmailRelay
  // count the X-MailRelayDLP headers if emailrelay testing

  if (emailrelay_testing) {
	m_dlp = p_dlp.matcher(headers);
	if ( m_dlp.find() ) {
		cnt_dlp_mail = cnt_dlp_mail + 1;
		print(&quot;cnt_dlp_mail = &quot; + cnt_dlp_mail);
	}
  }
  
	  //log.info(&quot;Message&quot;);
  //Message track
  //
  m_from = p_from.matcher(headers);
  if ( m_from.find() ) {
  	msg_indx = m_from.group(1);
  	vars.put(&quot;INDX_&quot; + cnt, msg_indx);
     //print(&quot;Recieved message indx &quot; + msg_indx);
  	log.info(&quot;Recieved message indx &quot; + msg_indx);
  }else {
	log.error(&quot;HATA: Regex bulunamadi!m_from.find&quot;);
  }
  

  
  //log.info(headers);
  //log.info(&quot;**************SENT**************&quot;);
  log.info(&quot;******************************&quot;);
  m_s = p_s.matcher(headers);
  if (m_s.find()) {
	t_s = m_s.group(1);
	vars.put(&quot;STIME_&quot; + cnt, t_s );
	log.info(&quot;Mail &quot; + cnt + &quot; send @ &quot; + t_s );
  }else {
	log.error(&quot;HATA: Regex bulunamadi!m_s.find&quot;);
  }
  //log.info(&quot;**************RECIEVE**************&quot;);
  m_r = p_r.matcher(headers);
  if (m_r.find()) {
	dt = m_r.group(1);
	t_r = strdate_to_milis(dt);
	String strMilis = Long.toString(t_r);
	log.info(&quot;Mail &quot; + cnt + &quot; recieved @ &quot; + strMilis);
	log.info(&quot;dt = &quot; + dt + &quot; = &quot; + strMilis + &quot; miliseconds...&quot;);
	vars.put(&quot;RTIME_&quot; + cnt, strMilis );
	//log.info(&quot;Mail Send Time id &quot; + cnt + &quot; = &quot; + strMilis );

  } else {
	log.error(&quot;HATA: Regex bulunamadi! m.find&quot;);
  }
  t_delay = t_r - Long.parseLong(t_s);
  String str_tdelay = Long.toString(t_delay);
  log.info(&quot;MAIL &quot; + cnt + &quot; has delayed &quot; + str_tdelay + &quot; miliseconds&quot;);
  vars.put(&quot;DTIME_&quot; + cnt, str_tdelay);

  //log.info(&quot;CLASS: &quot; + tmilis);
  cnt++;
}//endOfFor

//for emailrelay testing
if (emailrelay_testing) {
	log.info(&quot;Total leaked messages from emailrelay: &quot; + cnt_dlp_mail);
	print(&quot;Total leaked messages from emailrelay: &quot; + cnt_dlp_mail);
	String str_dlp_count = Integer.toString(cnt_dlp_mail);
	vars.put(&quot;LMAIL_COUNT&quot;, str_dlp_count);
} else if (mydlp_testing) {
	log.info(&quot;Total leaked messages from mydlp: &quot; + props.get(&quot;messages.leaked&quot;));
	print(&quot;Total leaked messages from mydlp: &quot; + props.get(&quot;messages.leaked&quot;));
	vars.put(&quot;LMAIL_COUNT&quot;, props.get(&quot;messages.leaked&quot;));
} else {
	log.warning(&quot;Not implemented test! BeanShell PostProcessor MAILR&quot;);
     print(&quot;Not implemented test! BeanShell PostProcessor MAILR&quot;);
}

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell Sampler MailCount" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//mailr_sampler = ctx.getPreviousSampler();
	//MAILR_CNT = 10;
	log.info(&quot;MailCount Sampler started&quot;);
	String resString = prev.getResponseDataAsString();
	log.info(&quot;------RES:-------&quot; + resString);
	print(&quot;RESPONSE: &quot; + resString);
	String [] resWords = resString.trim().split(&quot; &quot;);
	//mailrCount = Integer.parseInt(resWords[0]);
	String mailrCount = resWords[0].trim();
	//mailrCount = mailrCount.replaceAll(&quot; &quot;,&quot;&quot;).replaceAll(&quot;\n&quot;, &quot;&quot;).replaceAll(&quot;\r&quot;, &quot;&quot;);
	vars.put(&quot;MAILR_COUNT&quot;, mailrCount);
	log.info(&quot;MailRCount: &quot; + mailrCount);
	print(&quot;MailRCount: &quot; + mailrCount);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell DLP Mail Count" enabled="true">
          <stringProp name="TestPlan.comments">Count the actual known dlp messages from file. This file genrated from sender thread groups.</stringProp>
          <stringProp name="BeanShellSampler.query">import java.util.regex;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

String FILENAME = &quot;/home/koray/codes/TEZ/msgs.csv&quot;;
FileInputStream fileInputStream = new FileInputStream(FILENAME);
InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);//An InputStreamReader is a bridge from byte streams to character streams
log.info(&quot;******************DLP Mail Count started*************&quot;);
print(&quot;******************DLP Mail Count started*************&quot;);
BufferedReader br = new BufferedReader(inputStreamReader);
//String line = br.readLine();
String line = &quot;&quot;;
cnt_dlp_mail = 0;
Pattern pt = Pattern.compile(&quot;dlp_|_DLP_&quot;);
Matcher m;
//while(line != null)
do
{
  line = br.readLine();
  log.info(&quot;line = &quot; + line);
  if (line == null) break;
  try {
    m = pt.matcher(line);
  }

  catch (Throwable ex) {
    log.error(&quot;Failed to do this or that in DLP Mail Count&quot;, ex);
  }
  
  if ( m.find() ) {
	cnt_dlp_mail = cnt_dlp_mail + 1;
	log.info(&quot;DLP : &quot; + line);
	print(&quot;DLP : &quot; + line);
  }
    
} while(line != null);

print(&quot;Actual DLP Mail count: &quot; + cnt_dlp_mail);
log.info(&quot;Actual DLP Mail count: &quot; + cnt_dlp_mail);
vars.put(&quot;MAILDLP_COUNT&quot;, Integer.toString(cnt_dlp_mail));
inputStreamReader.close();
fileInputStream.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Mail Count Assertion" enabled="false">
          <stringProp name="BeanShellAssertion.query">String strTotalMessages = props.get(&quot;messages.total&quot;);
String strMailRCount = vars.get(&quot;MAILR_COUNT&quot;);
//GUI&apos;Den çalıştırılırsa strTotalMessages set edilmeli!
try {
	if (! strTotalMessages.equals(strMailRCount) ) {
		// this is standard stuff
		Failure=true ;
		FailureMessage = &quot;Expected message count: &quot; + strTotalMessages 
			       + &quot; is not equal to recieved message count: &quot; + strMailRCount;
		print(FailureMessage);   // this goes to stdout
		log.warn(FailureMessage); // this goes to the JMeter log file
	}
	
} catch (Throwable ex) {
	log.error(&quot;Failed to do this or that in Mail Count Assertion&quot;, ex);
}

	</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">true</boolProp>
        </BeanShellAssertion>
        <hashTree/>
        <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Mail DLP Count Assertion" enabled="true">
          <stringProp name="BeanShellAssertion.query">//actual leaked message count by tester

String strLeakedMessages = vars.get(&quot;MAILDLP_COUNT&quot;);
//leaked message count found by server
String strMailLeakCount = vars.get(&quot;LMAIL_COUNT&quot;);

try {
		if ( strLeakedMessages != null &amp;&amp; strMailLeakCount != null
			    &amp;&amp; ! strLeakedMessages.equals(strMailLeakCount) ) {
			Failure=true ;
			FailureMessage = &quot;Expected leaked message count: &quot; + strLeakedMessages +              
					 &quot; is not equal to leaked message count: &quot; + strMailLeakCount;
			print(FailureMessage);   // this goes to stdout
			log.warn(FailureMessage); // this goes to the JMeter log file
		}
	} catch (Throwable ex) {
	    log.error(&quot;Failed to do this or that in DLP Count Assertion&quot;, ex);
	}

	</stringProp>
          <stringProp name="BeanShellAssertion.filename"></stringProp>
          <stringProp name="BeanShellAssertion.parameters"></stringProp>
          <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
        </BeanShellAssertion>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>false</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/koray/codes/TEZ/mailreader_assertions.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler CSV" enabled="true">
          <stringProp name="BeanShellSampler.query">//CSV Writer
	log.info(&quot;***********Sampler CSV Started**************&quot;);
	print(&quot;***********Sampler CSV Started**************&quot;);

	String fileName = vars.get(&quot;CSVFILENAME&quot;) + &quot;.csv&quot;;
	FileWriter fstream = new FileWriter(fileName, true);
	BufferedWriter out = new BufferedWriter(fstream);

	strMailrCount = vars.get(&quot;MAILR_COUNT&quot;);
	Integer MAILR_CNT = Integer.parseInt(strMailrCount.trim());

	log.info(&quot;Mail Count: &quot; + strMailrCount);
	String sDtime = &quot;&quot;;
	Integer iDtime = 0;

	for(int i=1; i &lt;= MAILR_CNT; i++) {
	  sDtime = vars.get(&quot;DTIME_&quot; + i);
	  sTime = vars.get(&quot;STIME_&quot; + i);
	  sMsgIndx = vars.get(&quot;INDX_&quot; + i);
	  iDtime = Integer.parseInt(sDtime);
	  iDtime = Math.abs(iDtime); 
	  sDtime = Integer.toString(iDtime);
	  out.write(sMsgIndx + &quot;,&quot; + sTime + &quot;,&quot; + sDtime);
	  //out.write(sDtime);
	  out.write(System.getProperty(&quot;line.separator&quot;));
	  print(&quot;Delay time: &quot; + sDtime + &quot; ms&quot;);
	}

	out.close();
	fstream.close();
	log.info(&quot;---------------END OF MAIL READER--------------&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
